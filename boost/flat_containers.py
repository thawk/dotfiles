# encoding: utf-8

# Boost Software License - Version 1.0 - August 17th, 2003

# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:

# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

from .utils import *


class FlatSetBase:
    """Pretty Printer for boost::container::flat_set"""
    printer_name = 'boost::container::flat_set'
    template_name = 'boost::container::flat_set'

    def __init__(self, value):
        self.val = value
        self.element_type = get_basic_type(value.type).template_argument(0)

    def to_string(self):
        return 'boost::container::flat_set<{}> size={} capacity={}'.format(
            self.element_type, self.get_size(), self.get_capacity())

    def children(self):
        for idx in xrange(self.get_size()):
            yield '[{}]'.format(idx), (self.get_pointer() + idx).dereference()

    def display_hint(self):
        return 'array'


class FlatMapBase:
    """Pretty Printer for boost::container::flat_map"""
    printer_name = 'boost::container::flat_map'
    template_name = 'boost::container::flat_map'

    def __init__(self, value):
        self.val = value
        self.key_type = get_basic_type(value.type).template_argument(0)
        self.value_type = get_basic_type(value.type).template_argument(1)

    def to_string(self):
        return 'boost::container::flat_map<{}, {}> size={} capacity={}'.format(
            self.key_type, self.value_type, self.get_size(), self.get_capacity())

    def children(self):
        for idx in xrange(self.get_size()):
            pair = (self.get_pointer() + idx).dereference()
            yield '[{}]'.format(idx), pair["first"]
            yield '[{}]'.format(idx), pair["second"]

    def display_hint(self):
        return 'map'


class FlatTree152:
    def get_pointer(self):
        return self.val["m_flat_tree"]["m_data"]["m_vect"]["members_"]["m_start"]

    def get_size(self):
        return int(self.val["m_flat_tree"]["m_data"]["m_vect"]["members_"]["m_size"])

    def get_capacity(self):
        return int(self.val["m_flat_tree"]["m_data"]["m_vect"]["members_"]["m_capacity"])


class FlatTree154:
    def get_pointer(self):
        return self.val["m_flat_tree"]["m_data"]["m_vect"]["m_holder"]["m_start"]

    def get_size(self):
        return int(self.val["m_flat_tree"]["m_data"]["m_vect"]["m_holder"]["m_size"])

    def get_capacity(self):
        return int(self.val["m_flat_tree"]["m_data"]["m_vect"]["m_holder"]["m_capacity"])


class FlatTree158:
    def get_pointer(self):
        return self.val["m_data"]["m_vect"]["m_holder"]["m_start"]

    def get_size(self):
        return int(self.val["m_data"]["m_vect"]["m_holder"]["m_size"])

    def get_capacity(self):
        return int(self.val["m_data"]["m_vect"]["m_holder"]["m_capacity"])


@add_printer
class FlatSet152Printer(FlatSetBase, FlatTree152):
    min_supported_version = (1, 50, 0)
    max_supported_version = (1, 53, 0)

    def __init__(self, value):
        FlatSetBase.__init__(self, value)


@add_printer
class FlatSet154Printer(FlatSetBase, FlatTree154):
    min_supported_version = (1, 54, 0)
    max_supported_version = (1, 55, 0)

    def __init__(self, value):
        FlatSetBase.__init__(self, value)


@add_printer
class FlatSet158Printer(FlatSetBase, FlatTree158):
    min_supported_version = (1, 58, 0)
    max_supported_version = (1, 64, 0)

    def __init__(self, value):
        FlatSetBase.__init__(self, value)


@add_printer
class FlatSet165Printer(FlatSetBase):
    min_supported_version = (1, 65, 0)
    max_supported_version = last_supported_boost_version

    def __init__(self, value):
        FlatSetBase.__init__(self, value)

    def get_pointer(self):
        return self.val["m_data"]["m_seq"]["m_holder"]["m_start"]

    def get_size(self):
        return int(self.val["m_data"]["m_seq"]["m_holder"]["m_size"])

    def get_capacity(self):
        return int(self.val["m_data"]["m_seq"]["m_holder"]["m_capacity"])


@add_printer
class FlatMap152Printer(FlatMapBase, FlatTree152):
    min_supported_version = (1, 50, 0)
    max_supported_version = (1, 53, 0)

    def __init__(self, value):
        FlatMapBase.__init__(self, value)


@add_printer
class FlatMap154Printer(FlatMapBase, FlatTree154):
    min_supported_version = (1, 54, 0)
    max_supported_version = (1, 64, 0)

    def __init__(self, value):
        FlatMapBase.__init__(self, value)


@add_printer
class FlatMap165Printer(FlatMapBase):
    min_supported_version = (1, 65, 0)
    max_supported_version = last_supported_boost_version

    def __init__(self, value):
        FlatMapBase.__init__(self, value)

    def get_pointer(self):
        return self.val["m_flat_tree"]["m_data"]["m_seq"]["m_holder"]["m_start"]

    def get_size(self):
        return int(self.val["m_flat_tree"]["m_data"]["m_seq"]["m_holder"]["m_size"])

    def get_capacity(self):
        return int(self.val["m_flat_tree"]["m_data"]["m_seq"]["m_holder"]["m_capacity"])


# Iterator used for flat_set/flat_map
@add_printer
class BoostContainerVectorIterator:
    """Pretty Printer for boost::container::container_detail::vector_iterator (Boost.Container)"""
    printer_name = 'boost::container::container_detail::vec_iterator'
    min_supported_version = (1, 50, 0)
    max_supported_version = last_supported_boost_version
    template_name = [
        # 1.50 âˆ’ 1.54
        'boost::container::container_detail::vector_iterator',
        'boost::container::container_detail::vector_const_iterator',
        # 1.55-1.66
        'boost::container::container_detail::vec_iterator',
        # 1.67+
        'boost::container::vec_iterator']

    def __init__(self, value):
        self.val = value

    def to_string(self):
        return None

    def children(self):
        if self.val["m_ptr"]:
            yield 'value', self.val["m_ptr"].dereference()
