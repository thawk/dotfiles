#!/usr/bin/python3

import argparse
import sys
import os
import shutil
import urllib.request
import subprocess
import shlex
from os.path import join

tests_dir = sys.path[0]
printers_dir = os.path.abspath(join(tests_dir, '..'))
cpp_testsuite = join(tests_dir, 'testsuite.cpp')
python_testsuite = join(tests_dir, 'testsuite.py')
python_interactive = join(tests_dir, 'interactive.gdb')

tmp_dir = join(tests_dir, 'tmp')
cpp_binary = join(tmp_dir, 'a.out')


def download_boost(boost_ver: tuple):
    url_template = 'http://sourceforge.net/projects/boost/files/boost/{0}.{1}.{2}/boost_{0}_{1}_{2}.tar.bz2/download'
    archive_template = 'boost_{0}_{1}_{2}.tar.bz2'
    dir_template = 'boost_{0}_{1}_{2}'

    url = url_template.format(*boost_ver)
    archive_name = join(tmp_dir, archive_template.format(*boost_ver))
    boost_dir = os.path.join(tmp_dir, dir_template.format(*boost_ver))
    lib_dir = os.path.join(boost_dir, 'stage', 'lib')

    if not os.path.exists(archive_name):
        print('Downloading', url)
        urllib.request.urlretrieve(url, archive_name)
    if not os.path.exists(boost_dir):
        print('Unpacking', archive_name)
        shutil.unpack_archive(archive_name, tmp_dir)
    if not os.path.exists(lib_dir):
        print('Building')
        build_cmd = 'cd {};./bootstrap.sh && ./b2 headers && ./b2 --with-chrono --with-date_time --with-thread --with-filesystem --with-system --with-wave'.format(boost_dir)
        subprocess.call(build_cmd, shell=True)
    return boost_dir


def build_cpp(source_file: str, binary_file: str, boost_dir: str):
    assert os.path.isfile(source_file)
    if not os.path.isfile(binary_file) or os.path.getmtime(binary_file) < os.path.getmtime(source_file):
        print('Building C++ binary')
        cxx = os.environ.get('CXX', 'c++')
        cppflags = os.environ.get('CPPFLAGS', '')
        cxxflags = os.environ.get('CXXFLAGS', '')
        ldflags = os.environ.get('LDFLAGS', '')
        flags = '''-std=c++11 -O0 -g3 -ggdb -fno-eliminate-unused-debug-types -Wall -Wextra -Wno-unused-label
                  -Wno-unused-variable -Wno-unused-but-set-variable -pedantic
                  -DBOOST_INTRUSIVE_VARIADIC_TEMPLATES {} {} {}'''.format(cppflags, cxxflags, ldflags)
        args = [cxx] + shlex.split(flags) + (
            ['-isystem', boost_dir, '-o', binary_file, source_file] +
            ['-L', '%s/stage/lib' % boost_dir, '-Wl,-R', '%s/stage/lib' % boost_dir] +
            ['-lboost_wave', '-lboost_thread', '-lboost_filesystem', '-lboost_system'] )
        subprocess.check_call(args)


def run_debugger(boost_dir: str, gdb_path: str, cmd: str) -> bool:
    print('Running unit tests')
    environ = os.environ.copy()
    environ['CPPFLAGS'] = '{} -isystem "{}"'.format(environ.get('CPPFLAGS', ''), boost_dir)
    environ['PYTHONPATH'] = '{}:{}'.format(environ.get('PYTHONPATH', ''), printers_dir)

    args = [gdb_path, '--nx']
    if cmd == 'check':
        args += ['--batch', '-x', python_testsuite]
    else:
        args += ['-x', python_interactive]
    args.append(cpp_binary)
    return subprocess.call(args, env=environ) == 0


def run_command(boost_ver: tuple, clean: bool, gdb_path: str, cmd: str) -> bool:
    print('Running tests for boost {}.{}.{}'.format(*boost_ver))
    boost_dir = download_boost(boost_ver)
    if clean:
        try:
            os.remove(cpp_binary)
        except OSError:
            pass
    build_cpp(cpp_testsuite, cpp_binary, boost_dir)
    return run_debugger(boost_dir, gdb_path, cmd)


def parse_args():
    def split_boost_version(boost_ver_string: str):
        ver = boost_ver_string.split('.')
        if len(ver) not in (2, 3) or not all(part.isdigit() for part in ver):
            raise argparse.ArgumentTypeError('Incorrect boost version {}'.format(boost_ver_string))
        return ver if len(ver) == 3 else [ver[0], ver[1], 0]

    parser = argparse.ArgumentParser()
    parser.add_argument('--force-clean', '-c', action='store_true', help='Forced removal of C++ binary')
    parser.add_argument('--boost-version', '-b', metavar='X.Y.Z',
                        type=split_boost_version, action='append', required=True,
                        help='Boost version')
    parser.add_argument('--gdb', '-g', default='gdb', help='Path to gdb executable')
    parser.add_argument('cmd', nargs='?', default='check', choices=['check', 'interactive'], help='Command')
    args = parser.parse_args()

    if args.cmd == 'interactive' and len(args.boost_version) != 1:
        raise argparse.ArgumentTypeError('Interactive mode requires exactly one boost version')
    return args


args = parse_args()
os.makedirs(tmp_dir, exist_ok=True)
clean = args.force_clean or len(args.boost_version) > 1
run_results = [run_command(boost_ver, clean, args.gdb, args.cmd) for boost_ver in args.boost_version]
sys.exit(0 if all(run_results) else 1)
