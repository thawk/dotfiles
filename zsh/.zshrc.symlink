export ZPLUG_HOME="${HOME}/.zplug"
if [ ! -f ${ZPLUG_HOME}/repos/zplug/zplug/init.zsh ]
then
    echo 'Cloning zplug...'
    mkdir -p "${ZPLUG_HOME}/repos/zplug"
    git clone https://github.com/zplug/zplug.git "${ZPLUG_HOME}/repos/zplug/zplug"
    if [ "$?" -ne "0" ]; then
        echo "Failed to clone zplug!"
        echo 'Execute the following command get zplug:' > /dev/stderr
        echo "    git clone https://github.com/zplug/zplug.git '${ZPLUG_HOME}/repos/zplug/zplug'" > /dev/stderr
        return 1
    fi
fi

_load_plugins() {
    # load zplug
    source "${ZPLUG_HOME}/repos/zplug/zplug/init.zsh"

    # Tmux
    zplug "plugins/tmux", from:oh-my-zsh, if:"type tmux"

    # 一些缺省值
    zplug "willghatch/zsh-saneopt"

    # Load completion library for those sweet [tab] squares
    zplug "lib/completion", from:oh-my-zsh
    # Up -> History search!
    zplug "lib/key-bindings", from:oh-my-zsh
    # History defaults
    zplug "lib/history", from:oh-my-zsh
    # Adds useful aliases for things dealing with directories
    zplug "lib/directories", from:oh-my-zsh

    # util used by some plugins
    zplug "mafredri/zsh-async"

    # Python
    zplug "plugins/pip", from:oh-my-zsh, if:"type pip"
    zplug "plugins/python", from:oh-my-zsh, if:"type python"
    # mkvenv创建virtualenv，在cd时自动切换
    zplug "plugins/virtualenvwrapper", from:oh-my-zsh
    zplug "MichaelAquilina/zsh-autoswitch-virtualenv"
    # 用pip-app安装的每个pip都有自己的virtualenv
    zplug "sharat87/pip-app", if:"type pip"

    zplug "jeffwalter/zsh-plugin-rvm-auto", if:"[ -f ~/.rvm/bin/rvm ]"

    # Javascript
    zplug "plugins/npm", from:oh-my-zsh, if:"type npm"

    # ZAW
    # zplug "zsh-users/zaw", use:zaw.zsh
    # zplug "junkblocker/calibre-zaw-source", on:"zsh-users/zaw", if:"type calibredb", defer:1

    # Misc
    zplug "plugins/safe-paste", from:oh-my-zsh
    # <ESC><ESC>为当前命令加上sudo
    zplug "hcgraf/zsh-sudo"

    # 如果使用的命令有定义alias，会进行提醒
    zplug "djui/alias-tips"

    # VCS 
    zplug "plugins/gitfast", from:oh-my-zsh, if:"type git"

    # GeekNote: cmdline for evernote
    zplug "s7anley/zsh-geeknote", if:"type geeknote"

    # Asciidoctor
    zplug "sparsick/asciidoctor-zsh"

    # 外观调整
    zplug "zlsun/solarized-man"
    zplug "jreese/zsh-titles"

    # 自动建议、补全
    # Very cool plugin that generates zsh completion functions for commands
    # if they have getopt-style help text. It doesn't generate them on the fly,
    # you'll have to explicitly generate a completion, but it's still quite cool.
    # 用gencomp命令生成补全文件。
    # zplug "RobSis/zsh-completion-generator"

    zplug "psprint/history-search-multi-word"
    # zplug "hchbaw/auto-fu.zsh"
    zplug "zsh-users/zsh-autosuggestions"
    zplug "zsh-users/zsh-completions"
    zplug "zsh-users/zsh-syntax-highlighting", defer:2
    zplug "zsh-users/zsh-history-substring-search", defer:2

    # themes
    zplug "themes/agnoster", from:oh-my-zsh, as:theme

    zplug 'zplug/zplug', hook-build:'zplug --self-manage'

    # Install plugins if there are plugins that have not been installed
    if ! zplug check --verbose; then
        printf "Install? [y/N]: "
        if read -q; then
            echo; zplug install
        fi
    fi

    # Then, source plugins and add commands to $PATH
    zplug load

    # Bind UP and DOWN arrow keys for subsstring search.
    if zplug check zsh-users/zsh-history-substring-search; then
        zmodload zsh/terminfo
        bindkey "$terminfo[cuu1]" history-substring-search-up
        bindkey "$terminfo[cud1]" history-substring-search-down

        bindkey -M emacs '^P' history-substring-search-up
        bindkey -M emacs '^N' history-substring-search-down

        bindkey -M vicmd 'k' history-substring-search-up
        bindkey -M vicmd 'j' history-substring-search-down
    fi
}

# DOTFILES_ROOT="$(dirname $(dirname "$(readlink -f "$0")"))"
DOTFILES_ROOT="$HOME/.dotfiles"

# Uncomment the following line to use case-sensitive completion.
CASE_SENSITIVE="true"

VIRTUALENVWRAPPER_PYTHON=$(which python3)

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# If current shell doesn't contains zsh, set to zsh
[[ "$SHELL" =~ zsh ]] || export SHELL=$(which zsh)
export ZSH_TMUX_AUTOSTART="true"
export ZSH_TMUX_AUTOQUIT="false"

# 由于启用了tmux插件，在顶层zsh中是不会执行到oh-my-zsh.sh后面的内容的，所以专门source一些需要在顶层载入的内容
if [ "$SHLVL" -eq 1 ]
then
    # 在顶层SHELL中恢复base16的配色
    [ -e "$DOTFILES_ROOT/base-16/env.sh" ] && source "$DOTFILES_ROOT/base-16/env.sh"

    # Fix problem that SSH_AUTH_SOCK not updated in tmux
    if [ ! -z "$SSH_AUTH_SOCK" -a -e "$SSH_AUTH_SOCK" -a "$SSH_AUTH_SOCK" != "$HOME/.ssh/ssh_auth_sock" -a -d "$HOME/.ssh" ] ; then
        unlink "$HOME/.ssh/ssh_auth_sock" 2>/dev/null
        ln -s "$SSH_AUTH_SOCK" "$HOME/.ssh/ssh_auth_sock"
        export SSH_AUTH_SOCK="$HOME/.ssh/ssh_auth_sock"
    fi
fi

# Stash your environment variables in ~/.localrc. This means they'll stay out
# of your main dotfiles repository (which may be public), but you'll have access
# to them in your scripts.
[[ -a ~/.localrc ]] && source ~/.localrc
[[ -a ~/.zshrc.local ]] && source ~/.zshrc.local

# Disable oh-my-zsh autoupdate
DISABLE_AUTO_UPDATE=true

[ -f "$DOTFILES_ROOT/boot.zsh" ] && source "$DOTFILES_ROOT/boot.zsh"

_load_plugins

# compsys initialization
autoload -U compinit
compinit

