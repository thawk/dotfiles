#zmodload zsh/zprof

# DOTFILES_ROOT="$(dirname $(dirname "$(readlink -f "$0")"))"
DOTFILES_ROOT="$HOME/.dotfiles"
DOTFILES_LOCAL="${XDG_CACHE_HOME:-$HOME/.cache}/dotfiles"

# Uncomment the following line to use case-sensitive completion.
CASE_SENSITIVE="true"

VIRTUALENVWRAPPER_PYTHON=$(which python3)

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# If current shell doesn't contains zsh, set to zsh
[[ "$SHELL" =~ zsh ]] || export SHELL=$(which zsh)
#export ZSH_TMUX_AUTOSTART="true"
#export ZSH_TMUX_AUTOQUIT="false"

# 在顶层zsh中是不会执行到后面的内容，所以专门source一些需要在顶层载入的内容
if [ "$SHLVL" -eq 1 ]
then
    # 在顶层SHELL中恢复base16的配色
    [ -e "$DOTFILES_ROOT/base-16/env.sh" ] && source "$DOTFILES_ROOT/base-16/env.sh"

    # Fix problem that SSH_AUTH_SOCK not updated in tmux
    if [ ! -z "$SSH_AUTH_SOCK" -a -e "$SSH_AUTH_SOCK" -a "$SSH_AUTH_SOCK" != "$HOME/.ssh/ssh_auth_sock" -a -d "$HOME/.ssh" ] ; then
        unlink "$HOME/.ssh/ssh_auth_sock" 2>/dev/null
        ln -s "$SSH_AUTH_SOCK" "$HOME/.ssh/ssh_auth_sock"
        export SSH_AUTH_SOCK="$HOME/.ssh/ssh_auth_sock"
    fi

    if (( $+commands[tmux] )); then
        command tmux attach

        # Failed to attach, start new session
        if [[ $? -ne 0 ]]; then
            command tmux new-session
        fi
    fi
fi

# Disable oh-my-zsh autoupdate
DISABLE_AUTO_UPDATE=true

# Stash your environment variables in ~/.zshrc.local. This means they'll stay out
# of your main dotfiles repository (which may be public), but you'll have access
# to them in your scripts.
[[ -a ~/.localrc ]] && source ~/.localrc
[[ -a ~/.zshrc.local ]] && source ~/.zshrc.local

[ -f "$DOTFILES_LOCAL/boot.zsh" ] && source "$DOTFILES_LOCAL/boot.zsh" stage1

if (( $+commands[git] ))
then
    #source "$DOTFILES_ROOT/zsh/scripts/zplug.plugins.zsh"
    source "$DOTFILES_ROOT/zsh/scripts/zplugin.plugins.zsh"
fi

[ -f "$DOTFILES_LOCAL/boot.zsh" ] && source "$DOTFILES_LOCAL/boot.zsh" stage2

# compsys initialization
autoload -U compinit
compinit

#zprof
