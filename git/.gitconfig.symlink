[core]
    eol = lf
    autocrlf = false
    #filemode = false
    quotepath = false

[push]
    default = simple

[pull]
	rebase = true

[branch]
    autosetuprebase = always

# Local/private config goes in the include
[include]
    path = ~/.gitconfig.local
    path = ~/.dotfiles/git/gitalias.txt

[alias]
    #co = checkout
    #ci = commit
    #st = status -s
    #br = branch

    # current branch related log
    lg= log --graph --abbrev-commit --decorate --format=format:'%C(red)%h%C(reset) - %C(green)(%as)%C(reset) %C(reset)%s%C(reset) %C(blue)- %an%C(reset)%C(auto)%d%C(reset)'
    # log for all branches
    lga = lg --all
    # current branch's only, omit merge detail
    lgf = lg --first-parent
    # only merges
    lgm= lg --merges
    # two lines format
    lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(red)%h%C(reset) - %C(cyan)%aD%C(reset) %C(green)(%ar)%C(reset)%C(auto)%d%C(reset)%n          %C(white)%s%C(reset) %C(blue)- %an%C(reset)' --all
    # show commit Body
    lgb = log --graph --abbrev-commit --decorate --format=format:'%C(red)%h%C(reset) - %C(cyan)%aD%C(reset) %C(green)(%ar)%C(reset)%C(auto)%d%C(reset)%n%C(white)%s%C(reset) %C(blue)- %an%C(reset)%n%n%-b' --all
    # log with stat
    lgst = log --pretty=tformat:'%n%C(yellow)%s%C(auto)%d%n%C(white)%an %C(blue)at %ar %C(red)(%ad)%n%Creset%Cgreen%H' --graph --stat --topo-order --color-words --decorate
    # log with stat and patch
    lgp = lgst --patch
    # simplify graph, only show merges and so
    lgs = lg --simplify-by-decoration
    # simplify graph, include all branches
    lgsa = lgs --all
    type = cat-file -t
    dump = cat-file -p

    #https://stackoverflow.com/questions/8475448/find-merge-commit-which-include-a-specific-commit/8492711)
    #find-merge = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
    find-merge = "!bash -c 'commit=$0 && branch=${1:-HEAD} && git rev-list $commit..$branch --ancestry-path | grep -f <(git rev-list $commit..$branch --first-parent) | tail -1'"
    show-merge = "!sh -c 'merge=$(git find-merge $0 $1) && [ -n \"$merge\" ] && git show $merge'"

    # fetch all with submodule
    fas = !git fetch --all && git submodule foreach 'git fetch --all'
    # fetch all with submodule and verbose
    fasv = !git fetch --all --verbose && git submodule foreach 'git fetch --all --verbose'

    smst = submodule status
