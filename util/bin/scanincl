#!/usr/bin/env bash

source "${DOTFILES_ROOT}/logging.sh"

DEST_FILE=compile_flags.txt
EDITOR_CONFIG=.editorconfig

function EchoUsage()
{
    echo "
Usage: $(basename "$0") [options]

    Options:
        -h [ --help ]            show this screen
        -f [ --force ]           discard old configuration, re-generate a new one
        -s [ --std=<c++ std> ]   C++ standard
" >&2
}

TEMP=$(getopt -o h,f,s: --long help,force,std: -- "$@")

if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

# Note the quotes around $TEMP: they are essential!
eval set -- "$TEMP"

force=
std=

while true ; do
    case "$1" in
        -h|--help)
            EchoUsage
            exit 1
            ;;
        -f|--force)
            force=1
            shift 1
            ;;
        -s|--std)
            std="$2"
            shift 2
            ;;
        --)
            shift 1
            break
            ;;
        *) 
            fail "Unknown parameter '$1'!"
            exit 1
            ;;
    esac
done

if [[ -f "${DEST_FILE}" ]] && [[ -z "${force}" ]]
then
    info "Updating '${DEST_FILE}'..." 
    # remove all include rules generated by myself (-I./*)
    sed -i -e '/^ *-I\.\//d' "${DEST_FILE}"
else
    info "Generating '${DEST_FILE}'..." 

    > "${DEST_FILE}" echo "-xc++"

    if type python3-config &> /dev/null; then
        info "  Found python3: $(python3-config --includes | sed -n -e '/^.*-I\([^ ]\+\).*/{s//\1/;p;q;}')"
        python3-config --includes |
            grep -o -- "-I[^ ]\+" |
            sort -u \
            >> "${DEST_FILE}"
    else
        info "  Python3 not found"
    fi
fi

if [[ -n "$std" ]]; then
    info "  Setting C++ standard to -std=${std}"
    sed -i -e "/^-std=/d" "${DEST_FILE}"
    sed -i -e "2i -std=${std}" "${DEST_FILE}"
fi

boost_root="$(find "./lib/cppf/common/3rd" "./../" -maxdepth 1 -type d -name "boost_[0-9]*" 2> /dev/null | sort -r | head -n 1)"
if [[ -d "${boost_root}/boost" ]]; then
    info "  Found Boost: ${boost_root}"
    >> "${DEST_FILE}" echo "-I${boost_root}"
fi

find ./lib/cppf/{common,sts}/bin ./bin -regex '.*\.h$' 2> /dev/null |
    sed -n -e '/\(.*\(threading-multi\|bin\)\)\/.*/{s//-I"\1"/;p;}' |
    grep -v "/unittest/\|/test/\|/examples\?/" |
    uniq \
    >> ${DEST_FILE}

if [[ -d "lib/cppf/sscc/sscc-libs" ]]; then
    >> "${DEST_FILE}" echo "-I./lib/cppf/sscc/sscc-libs"
fi

find . -type d -name include -o -name impl_include |
    grep -v "/unittest/\|/test/\|/examples\?/" |
    grep -v "/boost_[0-9]\+_[0-9_]\+/" |
    sed -n -e '/^[^ ]/{s#^#-I#;p;}' |
    sort -n \
    >> "${DEST_FILE}"

info "  Done"

### generating .editorconfig ###

c_include_path="$(cat "${DEST_FILE}" | sed -n -e '/^-I\(\.\/\)\?\(.*\)/{s//\2/;p;}' | grep -v '^/' | tr $'\n' ':' | sed 's/:\+$//')"

if [[ ! -e "${EDITOR_CONFIG}" ]] || [[ ! -s "${EDITOR_CONFIG}" ]] || [[ -n "${force}" ]]; then
    info "Generating '${EDITOR_CONFIG}'..."
    > "${EDITOR_CONFIG}" echo "c_include_path = ${c_include_path}"
else
    info "Updating '${EDITOR_CONFIG}'..."

    if cat "${EDITOR_CONFIG}" | sed '/^\[/{d;q;}' | grep '^\s*c_include_path\s*=' > /dev/null; then
        info "  Modifing c_include_path config"
        sed -i -e "0,/^\(\s*c_include_path\s*=\).*/s!!\1 ${c_include_path}!" "${EDITOR_CONFIG}"
    else
        info "  Adding c_include_path config"
        sed -i -e "1i c_include_path = ${c_include_path}" "${EDITOR_CONFIG}"
    fi
fi
info "  Done"
